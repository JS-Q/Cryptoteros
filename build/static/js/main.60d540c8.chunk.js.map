{"version":3,"sources":["components/asset/asset.js","components/asset-list/asset-list.js","App.js","reportWebVitals.js","index.js"],"names":["Asset","assetData","asset","imgUrl","useState","setAsset","error","setError","loading","setLoading","useEffect","content","Object","keys","length","asset_id","price_usd","src","alt","height","propTypes","symbol","PropTypes","string","ASSET_SYMBOLS","AssetList","props","assetList","setAssetList","assetListJSON","map","index","find","iconData","assetIconsJSON","assetIcon","url","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAGe,SAASA,EAAT,GAA8C,IAAtBC,EAAqB,EAA5BC,MAAkBC,EAAU,EAAVA,OAAU,EAC/BC,mBAAS,IADsB,mBAClDF,EADkD,KAC3CG,EAD2C,OAE/BD,oBAAS,GAFsB,mBAElDE,EAFkD,KAE3CC,EAF2C,OAG3BH,oBAAS,GAHkB,mBAGlDI,EAHkD,KAGzCC,EAHyC,KAKzDC,qBAAU,WACPL,EAASJ,GACTQ,GAAW,GACXF,GAAS,KACT,CAACN,IAEJ,IAAIU,EAAU,6BAoBd,OAnBIL,IACDK,EAAU,wCAGRL,GAAUE,GAAyC,IAA9BI,OAAOC,KAAKX,GAAOY,SAC1CH,EACG,qCACG,6BAAKT,EAAMa,WACX,wCAAWb,EAAMc,aACjB,qBACEC,IAAKd,EAELe,IAAG,UAAKjB,EAAUc,SAAf,SACHI,OAAO,WAMXR,EAGVX,EAAMoB,UAAY,CACfC,OAAQC,IAAUC,Q,kBCjCfC,EAAgB,CAAC,MAAO,MAAO,OAAQ,MAAO,SAErC,SAASC,EAAUC,GAAQ,IAAD,EACJtB,mBAAS,IADL,mBAC/BuB,EAD+B,KACpBC,EADoB,OAEZxB,oBAAS,GAFG,mBAE/BE,EAF+B,KAExBC,EAFwB,OAGRH,oBAAS,GAHD,mBAG/BI,EAH+B,KAGtBC,EAHsB,KAKtCC,qBAAU,WACPkB,EAAaC,GACbpB,GAAW,GACXF,GAAS,KAiBT,CAACoB,IAEJ,IAAIhB,EAAU,6BAwBd,OAvBIL,IACDK,EAAU,wCAGRL,GAAUE,GAAgC,IAArBmB,EAAUb,SACjCH,EACG,qCACG,wCACCa,EAAcM,KAAI,SAACT,EAAQU,GACzB,IAAM9B,EAAY0B,EAAUK,MACzB,SAAC9B,GAAD,OAAWA,EAAMa,WAAaM,KAG3BY,EAAWC,EAAeF,MAC7B,SAACG,GAAD,OAAeA,EAAUpB,WAAaM,KAGzC,OAAO,cAACrB,EAAD,CAAmBE,MAAOD,EAAWE,OAAQ8B,EAASG,KAA1CL,UAMxBpB,EC5CK0B,MAXf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,6CACA,cAACb,EAAD,UCIOc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.60d540c8.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\n\nexport default function Asset({ asset: assetData, imgUrl }) {\n   const [asset, setAsset] = useState({});\n   const [error, setError] = useState(false);\n   const [loading, setLoading] = useState(true);\n\n   useEffect(() => {\n      setAsset(assetData);\n      setLoading(false);\n      setError(false);\n   }, [assetData]);\n\n   let content = <></>;\n   if (error) {\n      content = <h1>ERROR</h1>;\n   }\n\n   if (!error && !loading && Object.keys(asset).length !== 0) {\n      content = (\n         <>\n            <h2>{asset.asset_id}</h2>\n            <p>Price: {asset.price_usd}</p>\n            <img\n              src={imgUrl}\n            //   src={require(`../../data/images/${assetData.asset_id.toLowerCase()}.png`)}\n              alt={`${assetData.asset_id} logo`}\n              height=\"50\"\n              >\n            </img>\n         </>\n      );\n   }\n   return content;\n}\n\nAsset.propTypes = {\n   symbol: PropTypes.string,\n};\n","import React, { useEffect, useState } from 'react';\nimport Asset from '../asset/asset';\nimport assetListJSON from \"../../data/list-all-assets.json\";\nimport assetIconsJSON from \"../../data/list-all-asset-icons.json\";\n\nconst ASSET_SYMBOLS = ['BTC', 'ETH', 'LINK', 'ADA', 'MATIC'];\n\nexport default function AssetList(props) {\n   const [assetList, setAssetList] = useState([]);\n   const [error, setError] = useState(false);\n   const [loading, setLoading] = useState(true);\n\n   useEffect(() => {\n      setAssetList(assetListJSON);\n      setLoading(false);\n      setError(false);\n\n   // Commented out due to rate limiting\n   //    fetch(`https://rest.coinapi.io/v1/assets?filter_asset_id=${ASSET_SYMBOLS.join(\",\")}`, {\n   //       headers: {\n   //          'X-CoinAPI-Key': '8862BDA4-E571-49DA-87AC-3FBB99402385',\n   //       },\n   //    })\n   //       .then((response) => response.json())\n   //       .then((data) => {\n   //          setAssetList(data);\n   //          setLoading(false);\n   //       })\n   //       .catch((_error) => {\n   //          setLoading(false);\n   //          setError(true);\n   //       });\n   }, [assetList]);\n\n   let content = <></>;\n   if (error) {\n      content = <h1>ERROR</h1>;\n   }\n\n   if (!error && !loading && assetList.length !== 0) {\n      content = (\n         <>\n            <h2>Assets</h2>\n            {ASSET_SYMBOLS.map((symbol, index) => {\n               const assetData = assetList.find(\n                  (asset) => asset.asset_id === symbol\n               );\n               \n               const iconData = assetIconsJSON.find(\n                  (assetIcon) => assetIcon.asset_id === symbol\n               );\n\n               return <Asset key={index} asset={assetData} imgUrl={iconData.url}></Asset>;\n            })}\n         </>\n      );\n   }\n\n   return content;\n}\n","import './App.css';\nimport AssetList from './components/asset-list/asset-list';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Cryptoteros</h1>\n        <AssetList></AssetList>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}